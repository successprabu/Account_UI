// HeaderFooter.js
import { jsPDF } from 'jspdf';
import { format } from 'date-fns';

export const addHeader = (pdf, headerData) => {
  
  const reportDate = headerData.reportDate; // Assuming headerData.reportDate is in a format recognized by Date
  const formattedDate = format(new Date(reportDate), 'dd-MM-yyyy');
  
  pdf.setFontSize(14);
  pdf.setFont("helvetica", "bold");
  pdf.setTextColor(255, 255, 255); // White color for the header text
  pdf.setFillColor(0, 0, 0); // Black background for header
  pdf.rect(0, 0, pdf.internal.pageSize.getWidth(), 20, 'F'); // Header background

  // Dynamic header title
  pdf.text(headerData.title, pdf.internal.pageSize.getWidth() / 2, 15, { align: 'center' });

  // Additional header data can be added below the title
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  pdf.setTextColor(255, 255, 255); // Keeping the same color as the header
// Left-aligned Report Date
pdf.text(`Report Date: ${formattedDate}`, 10, 10); // x: 10 for left alignment, y: 10 for vertical position

// Right-aligned Generated By
const textWidth = pdf.getTextWidth(`Generated By: ${headerData.generatedBy}`); // Calculate the width of the text
pdf.text(`Generated By: ${headerData.generatedBy}`, pdf.internal.pageSize.getWidth() - textWidth - 10, 10); // x: adjusted for right alignment, y: 10 for vertical position
};

export const addFooter = (pdf, footerData) => {
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  pdf.setTextColor(0, 0, 0); // Black color for footer text
  pdf.setFillColor(220, 220, 220); // Light gray background for footer
  pdf.rect(0, pdf.internal.pageSize.getHeight() - 20, pdf.internal.pageSize.getWidth(), 20, 'F'); // Footer background

  const footerTextArray  = [
    `Powered By: ${footerData.poweredBy}`,`Software Support: ${footerData.supportPhone}`
  ];

    // Join array items with a separator (e.g., ' | ')
    const footerText = footerTextArray.join(' | ');

    // Calculate text width to center it
    const pageWidth = pdf.internal.pageSize.getWidth();
    const textWidth = pdf.getTextWidth(footerText);
  
    // Calculate x position for center alignment
    const x = (pageWidth - textWidth) / 2;

  // footerText.forEach((text, index) => {
  //   pdf.text(text, 10, pdf.internal.pageSize.getHeight() - 10 + (index * 10));
// });

      // Place the text in the footer
  pdf.text(footerText, x, pdf.internal.pageSize.getHeight() - 10);

};
